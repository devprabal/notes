DIRS_UNSORTED=	rpi \
		linux \
		brave_browser \
		c \
		cpp \
		vim \
		windows \
		code_review \
		git

DIRS=$(sort $(DIRS_UNSORTED))

## print sorted DIRS
#$(info $$(DIRS) is [${DIRS}])

include constants.mk

LOWDOWN_PATH=./lowdown
CSS_PATH=style.css
OBJS= build.sh README.md style.css style.css.map index.html

MAKE=make --no-print-directory

.PHONY: build
build: 
	@$(MAKE) clean 
	@$(MAKE) script_wrapper 
	@$(MAKE) README 
	@$(MAKE) index.html 
	@$(MAKE) fix_index.html
	@echo -e "$(COLOR_GREEN)DONE$(COLOR_NONE)"

.PHONY: clean
clean:
	@echo -e "$(COLOR_YELLOW)Deleting$(COLOR_NONE) pre-existing (if any) files $(COLOR_BLUE)$(OBJS)$(COLOR_NONE)"
	@rm -f $(OBJS)

## create dir-specific temporary makefiles
.PHONY: gen_temp_mk
gen_temp_mk:
	@for dirname in $(DIRS); do \
		echo "# AUTOGENERATED!! DO NOT EDIT" >  $${dirname}/$${dirname}.mk; \
		echo "include ../constants.mk" >>  $${dirname}/$${dirname}.mk; \
		echo "include ../common.mk" >>  $${dirname}/$${dirname}.mk; \
	done

## remove dir-specific temporary makefiles
.PHONY: clean_temp_mk
clean_temp_mk:
	@for dirname in $(DIRS); do \
		rm -f $${dirname}/$${dirname}.mk; \
	done

## create main build shell script which calls all the dir-specific temporary makefiles
.PHONY: script
script:
	@echo -e "$(COLOR_YELLOW)Generating$(COLOR_NONE) script file $(COLOR_BLUE)build.sh$(COLOR_NONE)"
	@echo "# AUTOGENERATED!! DO NOT EDIT" > build.sh
	
	@for dirname in $(DIRS); do \
		echo "make NOTE_NAME=$${dirname}_notes -C $${dirname} -f $${dirname}.mk --no-print-directory" >> build.sh ; \
	done
	
	@chmod +x build.sh
	@./build.sh

.PHONY: script_wrapper
script_wrapper: 
	@$(MAKE) clean_temp_mk 
	@$(MAKE) gen_temp_mk 
	@$(MAKE) script

.PHONY: README
README:
	@echo -e "$(COLOR_YELLOW)Generating$(COLOR_NONE) README file $(COLOR_BLUE)README.md$(COLOR_NONE)"
	@echo '# devpogi notes' > README.md
	@echo >> README.md
	@echo '*My learnings on various subjects.*' >> README.md
	@echo >> README.md
	@echo 'List' >> README.md
	@echo >> README.md
	@for dirname in $(DIRS); do \
		echo "- [$${dirname}]($${dirname}/$${dirname}_notes.md)" >> README.md ; \
	done
	@echo >> README.md

index.html: README.md style.css
	@$(LOWDOWN_PATH) $< -o $@.temp -thtml
	@cat html_envelope > index.html
	@cat $@.temp >> index.html
	@echo '</body>' >> index.html
	@echo '</html>' >> index.html
	@rm -f $@.temp
	@echo -e "generated $(COLOR_BLUE)index.html$(COLOR_NONE)"

.PHONY: fix_index.html
fix_index.html:
	@sed -i 's/.md/.html/g' index.html

%.css: %.scss
	@echo -e "$(COLOR_YELLOW)Generating$(COLOR_NONE) stylesheet $(COLOR_BLUE)style.css$(COLOR_NONE)"
	@./sass $< $@

.PHONY: zip
zip:
	@rm -rf output
	@mkdir -p output
	@cp index.html style.css output
	@for dirname in $(DIRS); do \
		mkdir -p output/$${dirname}; \
		cp $${dirname}/$${dirname}_notes.html output/$${dirname}; \
	done
	@rm -f output.zip
	@zip -r output.zip output/ --quiet
